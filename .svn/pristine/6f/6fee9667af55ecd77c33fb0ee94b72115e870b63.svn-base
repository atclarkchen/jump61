// This file contains definitions for an OPTIONAL part of your project.  If you
// choose not to do the optional point, you can delete this file from your
// project.

// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;

import ucb.gui.Pad;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.io.PrintWriter;

import static jump61.Side.*;

/** A GUI component that displays a Jump61 board, and converts mouse clicks
 *  on that board to commands that are sent to the current Game.
 *  @author
 */
class BoardWidget extends Pad {

    /** Length of the side of one square in pixels. */
    private static final int SQUARE_SIZE = 50;
    /** Width and height of a spot. */
    private static final int SPOT_DIM = 8;
    /** Minimum separation of center of a spot from a side of a square. */
    private static final int SPOT_MARGIN = 10;
    /** Width of the bars separating squares in pixels. */
    private static final int SEPARATOR_SIZE = 3;
    /** Width of square plus one separator. */
    private static final int SQUARE_SEP = SQUARE_SIZE + SEPARATOR_SIZE;

    /** Colors of various parts of the displayed board. */
    private static final Color
        NEUTRAL = Color.WHITE,
        SEPARATOR_COLOR = Color.BLACK,
        SPOT_COLOR = Color.BLACK,
        RED_TINT = new Color(255, 200, 200),
        BLUE_TINT = new Color(200, 200, 255);

    /** A new BoardWidget that monitors and displays GAME and its Board, and
     *  converts mouse clicks to commands to COMMANDWRITER. */
    BoardWidget(Game game, PrintWriter commandWriter) {
        _game = game;
        _board = _bufferedBoard = game.getBoard();
        _side = _board.size() * SQUARE_SEP + SEPARATOR_SIZE;
        setPreferredSize(_side, _side);
        setMouseHandler("click", this, "doClick");
        _commandOut = commandWriter;
    }

    /* .update and .paintComponent are synchronized because they are called
     *  by three different threads (the main thread, the thread that
     *  responds to events, and the display thread.  We don't want the
     *  saved copy of our Board to change while it is being displayed. */

    /** Update my display depending on any changes to my Board.  Here, we
     *  save a copy of the current Board (so that we can deal with changes
     *  to it only when we are ready for them), and resize the Widget if the
     *  size of the Board should change. */
    synchronized void update() {
        _bufferedBoard = new MutableBoard(_board);
        int side0 = _side;
        _side = _board.size() * SQUARE_SEP + SEPARATOR_SIZE;
        if (side0 != _side) {
            setPreferredSize(_side, _side);
        }
    }
/*
 * public synchronized void paintComponent(Graphics2D g) {
        g.setColor(EMPTY_SQUARE_COLOR);
        g.fillRect(0, 0, _boardSide, _boardSide);
        g.setColor(BAR_COLOR);
        for (int k = 0; k <= _boardSide; k += ROW_SIZE) {
            g.fillRect(0, k, _boardSide, TILE_SEP);
            g.fillRect(k, 0, TILE_SEP, _boardSide);
        }
        for (Tile tile : _tiles) {
            tile.render(g);
        }
        if (_end) {
            g.setFont(OVERLAY_FONT);
            FontMetrics metrics = g.getFontMetrics();
            g.setColor(OVERLAY_COLOR);
            g.drawString("GAME OVER",
                         (_boardSide
                          - metrics.stringWidth("GAME OVER")) / 2,
                         (2 * _boardSide + metrics.getMaxAscent()) / 4);
        }
    }(non-Javadoc)
 * @see ucb.gui.Pad#paintComponent(java.awt.Graphics2D)
 */
    @Override
    public synchronized void paintComponent(Graphics2D g) {
        // FIXME
    	g.setColor(NEUTRAL);
    	g.fillRect(0, 0, getWidth(), getHeight());
    	g.fillRect(0, 0, _side, _side);
    	g.setColor(SEPARATOR_COLOR);

    	//Make grids
    	/*  g.fillRect(0, k, _boardSide, TILE_SEP);
        g.fillRect(k, 0, TILE_SEP, _boardSide); */
    	for (int k = 0; k <= this._side; k += this.SQUARE_SEP) {//ROW_SIZE = SQUARE_SEP
    		g.fillRect(0, k, this._side, this.SEPARATOR_SIZE);//rows
    		g.fillRect(k, 0, this.SEPARATOR_SIZE, this._side);//columns
    	}
    	/* for (Tile tile : _tiles) {
            tile.render(g); //render this tile on G
        }*/
    	Board b = this._game.getBoard();

    	//put colors onto the board
    	for (int r = 1; r <= b.size(); r++) {
    		for (int c = 1; c <= b.size(); c++) {
    			//call displaySpots(g, r, c) colors and displays the spots on the square at row R and column C
    			displaySpots(g, r, c);
    		}
    	}
    }

    /** Color and display the spots on the square at row R and column C
     *  on G.  (Used by paintComponent). */
    private void displaySpots(Graphics2D g, int r, int c) {
        // FIXME
    	//put colors onto the board
    	Board b = this._game.getBoard();
    	Square square = b.get(r, c);
    	int spots = square.getSpots();
    	Side side = square.getSide();
    	if (side == RED) {
    		g.setColor(RED_TINT);
    	}
    	if (side == BLUE) {
    		g.setColor(BLUE_TINT);;
    	}
    	if (side == WHITE) {
    		g.setColor(NEUTRAL);
    	}
    	//fill with color

    	//convert r c to x y
    	int x = (r-1) * (this.SQUARE_SIZE + this.SEPARATOR_SIZE) + this.SEPARATOR_SIZE;
    	int y = (c-1) * (this.SQUARE_SIZE + this.SEPARATOR_SIZE) + this.SEPARATOR_SIZE;
    	g.fillRect(x, y, this.SQUARE_SIZE, this.SQUARE_SIZE);

    	//spots = 1;
    	//add spots
    	int spotx = 0;
    	int spoty = 0;
    	for (int i = 0; i < spots; i++) {
    		if (i == 0) {
    			spotx = x + this.SPOT_MARGIN;
    			spoty = y + this.SPOT_MARGIN;
    		}
    		if (i == 1) {
    			spotx = x + this.SQUARE_SIZE - this.SPOT_MARGIN;
    			spoty = y + this.SPOT_MARGIN;
    		}
    		if (i == 2) {
    			spotx = x + this.SQUARE_SIZE - this.SPOT_MARGIN;
    			spoty = y + this.SQUARE_SIZE - this.SPOT_MARGIN;
    		}
    		if (i == 3) {
    			spotx = x + this.SPOT_MARGIN;
    			spoty = y + this.SQUARE_SIZE - this.SPOT_MARGIN;
    		}
    		this.spot(g, spotx, spoty);
    	}

    	/*    void render(Graphics2D g) {
        int x = (int) Math.rint(_x), y = (int) Math.rint(_y);
        if (_value < 100) {
            g.setFont(TILE_FONT2);
        } else if (_value < 1000) {
            g.setFont(TILE_FONT3);
        } else {
            g.setFont(TILE_FONT4);
        }
        FontMetrics metrics = g.getFontMetrics();
        int bloom =
            (int) Math.rint(TILE_SIDE * BLOOM_FACTOR * (1 + _bloom)
                            / (BLOOM_STEPS + 1));
        g.setColor(TILE_COLORS.get(_value)[1]);
        g.fillRect(x - bloom, y - bloom, 2 * bloom + TILE_SIDE,
                   2 * bloom + TILE_SIDE);
        g.setColor(TILE_COLORS.get(_value)[0]);

        String label = Integer.toString(_value);
        g.drawString(label,
                     x + (TILE_SIDE - metrics.stringWidth(label)) / 2,
                     y + (2 * TILE_SIDE + metrics.getMaxAscent()) / 4);
    } */

    }

    /** Draw one spot centered at position (X, Y) on G. */
    private void spot(Graphics2D g, int x, int y) {
        g.setColor(SPOT_COLOR);
        g.fillOval(x - SPOT_DIM / 2, y - SPOT_DIM / 2, SPOT_DIM, SPOT_DIM);
    }

    /** Respond to the mouse click depicted by EVENT. */
    public void doClick(MouseEvent event) {
        // x and y coordinates relative to the upper-left corner of the
        // upper-left square (increasing y is down).
        int x = event.getX() - SEPARATOR_SIZE,
            y = event.getY() - SEPARATOR_SIZE;
        // REPLACE THE FOLLOWING WITH COMPUTATION OF r AND c FROM x and y,
        // AND SEND THE APPROPRIATE COMMAND TO OUR GAME, IF THE EVENT
        // OCCURS AT A VALID POSITION.  OTHERWISE, DOES NOTHING.

        //convert X and Y to R and C
    	//int x = (r-1) * (this.SQUARE_SIZE + this.SEPARATOR_SIZE) + this.SEPARATOR_SIZE;
    	//int y = (c-1) * (this.SQUARE_SIZE + this.SEPARATOR_SIZE) + this.SEPARATOR_SIZE;
        int r = ((x - this.SEPARATOR_SIZE) / (this.SQUARE_SIZE + this.SEPARATOR_SIZE)) + 1;
        int c = ((y - this.SEPARATOR_SIZE) / (this.SQUARE_SIZE + this.SEPARATOR_SIZE)) + 1;
        _commandOut.printf("%d %d%n", r, c);
    }

    /** The Game I am playing. */
    private Game _game;
    /** The Board I am displaying. */
    private Board _board;
    /** An internal snapshot of _board (to prevent race conditions). */
    private Board _bufferedBoard;
    /** Dimension in pixels of one side of the board. */
    private int _side;
    /** Destination for commands derived from mouse clicks. */
    private PrintWriter _commandOut;
}
